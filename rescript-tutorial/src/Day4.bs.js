// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");

var test_raw = "ecl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in";

function str_to_key(str) {
  switch (str) {
    case "byr" :
        return "birth_year";
    case "cid" :
        return "country_id";
    case "ecl" :
        return "eye_color";
    case "eyr" :
        return "expiration_year";
    case "hcl" :
        return "hair_color";
    case "hgt" :
        return "height";
    case "iyr" :
        return "issue_year";
    case "pid" :
        return "passport_id";
    default:
      throw {
            RE_EXN_ID: "Failure",
            _1: "invalid str key" + str,
            Error: new Error()
          };
  }
}

function get_item_arr(raw_p) {
  return raw_p.replace(/\n/g, " ").split(" ").map(function (raw_item) {
                return raw_item.split(":");
              }).map(function (v) {
              if (v.length !== 2) {
                throw {
                      RE_EXN_ID: "Failure",
                      _1: "not valid key value pair",
                      Error: new Error()
                    };
              }
              var k = v[0];
              var v$1 = v[1];
              return [
                      str_to_key(k),
                      v$1
                    ];
            });
}

function log_and_next(a) {
  console.log(a);
  return a;
}

function check_has_required_fields(item_arr) {
  var key_arr = item_arr.map(function (param) {
        return param[0];
      });
  return [
            "birth_year",
            "issue_year",
            "expiration_year",
            "height",
            "hair_color",
            "eye_color",
            "passport_id"
          ].every(function (k) {
              return key_arr.includes(k);
            });
}

function in_range(v, from_, to_) {
  var option_int_v = Belt_Int.fromString(v);
  if (option_int_v !== undefined && from_ <= option_int_v) {
    return option_int_v <= to_;
  } else {
    return false;
  }
}

function check_height(h) {
  var match = h.match(/^([0-9]{2,3})(cm|in)$/);
  if (match === null) {
    return false;
  }
  if (match.length !== 3) {
    return false;
  }
  var v = match[1];
  var match$1 = match[2];
  switch (match$1) {
    case "cm" :
        return in_range(v, 150, 193);
    case "in" :
        return in_range(v, 59, 76);
    default:
      return false;
  }
}

function check_re(v, regExp) {
  var match = v.match(regExp);
  return match !== null;
}

var eye_color_set = Belt_SetString.fromArray([
      "amb",
      "blu",
      "brn",
      "gry",
      "grn",
      "hzl",
      "oth"
    ]);

console.log("regex test expect true = ", check_re("#123abc", /^#[0-9a-f]{6}$/));

console.log("regex test expect false = ", check_re("#123abz", /^#[0-9a-f]{6}$/));

console.log("color_test expect false = ", Belt_SetString.has(eye_color_set, "wat"));

console.log("color test expect true = ", Belt_SetString.has(eye_color_set, "brn"));

console.log("in range test expect true = ", in_range("2020", 2010, 2020));

console.log("in range test expect false = ", in_range("2021", 2010, 2020));

console.log("check height expect true = ", check_height("193cm"));

console.log("check height expect false = ", check_height("194cm"));

console.log("check height expect false = ", check_height("190in"));

console.log("check height expect true = ", check_height("60in"));

console.log("check height expect false = ", check_height("190"));

function validate_fields(item_arr) {
  return item_arr.every(function (item) {
              var match = item[0];
              if (match === "expiration_year") {
                return in_range(item[1], 2020, 2030);
              } else if (match === "eye_color") {
                return Belt_SetString.has(eye_color_set, item[1]);
              } else if (match === "height") {
                return check_height(item[1]);
              } else if (match === "birth_year") {
                return in_range(item[1], 1920, 2002);
              } else if (match === "country_id") {
                return true;
              } else if (match === "passport_id") {
                return check_re(item[1], /^[0-9]{9}$/);
              } else if (match === "issue_year") {
                return in_range(item[1], 2010, 2020);
              } else {
                return check_re(item[1], /^#[0-9a-f]{6}$/);
              }
            });
}

console.log(test_raw.split("\n\n").map(get_item_arr).filter(check_has_required_fields).length);

console.log(Fs.readFileSync("input/Day4.txt", "utf8").trim().split("\n\n").map(get_item_arr).filter(check_has_required_fields).filter(validate_fields).length);

exports.test_raw = test_raw;
exports.str_to_key = str_to_key;
exports.get_item_arr = get_item_arr;
exports.log_and_next = log_and_next;
exports.check_has_required_fields = check_has_required_fields;
exports.in_range = in_range;
exports.check_height = check_height;
exports.check_re = check_re;
exports.eye_color_set = eye_color_set;
exports.validate_fields = validate_fields;
/* eye_color_set Not a pure module */
