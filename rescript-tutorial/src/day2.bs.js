// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Day2Input = require("./Day2Input.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

var raw_input_array = Day2Input.day2_input.split("\n");

console.log(Caml_array.get(raw_input_array, 0));

function fromStringExn(s) {
  var n = Belt_Int.fromString(s);
  if (n !== undefined) {
    return n;
  }
  throw {
        RE_EXN_ID: "Failure",
        _1: s + "Int.fromStringExn",
        Error: new Error()
      };
}

function raw_to_range(raw_range) {
  var __x = raw_range.split("-");
  var match = __x.map(fromStringExn);
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: "Failure",
          _1: "range.fromStringExn",
          Error: new Error()
        };
  }
  var a = match[0];
  var b = match[1];
  return [
          a,
          b
        ];
}

function raw_to_row(raw) {
  var match = raw.split(" ");
  if (match.length !== 3) {
    throw {
          RE_EXN_ID: "Failure",
          _1: "row.fromStringExn",
          Error: new Error()
        };
  }
  var raw_range = match[0];
  var raw_m = match[1];
  var password = match[2];
  return {
          range: raw_to_range(raw_range),
          m: Caml_string.get(raw_m, 0),
          password: password
        };
}

var input_arr = raw_input_array.map(raw_to_row);

console.log(Caml_array.get(input_arr, 0));

function count_m(m, password) {
  var __x = password.split("");
  var __x$1 = __x.map(function (s) {
        return Caml_string.get(s, 0);
      });
  return __x$1.filter(function (c) {
              return c === m;
            }).length;
}

var first_row = Caml_array.get(input_arr, 0);

console.log(count_m(first_row.m, first_row.password) === 11);

function validate(row_v) {
  var match = row_v.range;
  var count_v = count_m(row_v.m, row_v.password);
  if (match[0] <= count_v) {
    return count_v <= match[1];
  } else {
    return false;
  }
}

var __x = input_arr.map(validate);

console.log(__x.reduce((function (acc, v) {
            return acc + (
                    v ? 1 : 0
                  ) | 0;
          }), 0));

exports.raw_input_array = raw_input_array;
exports.fromStringExn = fromStringExn;
exports.raw_to_range = raw_to_range;
exports.raw_to_row = raw_to_row;
exports.input_arr = input_arr;
exports.count_m = count_m;
exports.first_row = first_row;
exports.validate = validate;
/* raw_input_array Not a pure module */
