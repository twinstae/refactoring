// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Day3Input = require("./Day3Input.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function input_to_tree_map(raw_input) {
  var __x = raw_input.split("\n");
  return __x.map(function (row) {
              return row.split("");
            });
}

function getSize(map) {
  return [
          map.length,
          Caml_array.get(map, 0).length
        ];
}

function getRoute(param) {
  var width = param[1];
  return Belt_Array.range(0, param[0] - 1 | 0).map(function (y, x) {
              return [
                      y,
                      Caml_int32.mod_(Math.imul(x, 3), width)
                    ];
            });
}

function bool_array_sum(bool_array) {
  return bool_array.reduce((function (acc, v) {
                return acc + (
                        v ? 1 : 0
                      ) | 0;
              }), 0);
}

function count_tree(tree_map) {
  var route = getRoute(getSize(tree_map));
  var is_tree = function (param) {
    return Caml_array.get(Caml_array.get(tree_map, param[0]), param[1]) === "#";
  };
  return bool_array_sum(route.map(is_tree));
}

var test_result = count_tree(input_to_tree_map(Day3Input.test_input));

console.log(test_result === 7);

var result = count_tree(input_to_tree_map(Day3Input.raw_input));

console.log(result);

exports.input_to_tree_map = input_to_tree_map;
exports.getSize = getSize;
exports.getRoute = getRoute;
exports.bool_array_sum = bool_array_sum;
exports.count_tree = count_tree;
exports.test_result = test_result;
exports.result = result;
/* test_result Not a pure module */
