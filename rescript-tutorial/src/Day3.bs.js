// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function input_to_tree_map(raw_input) {
  return raw_input.split("\n").map(function (row) {
              return row.split("");
            });
}

function getSize(map) {
  return [
          map.length,
          Caml_array.get(map, 0).length
        ];
}

function getRoute(down, right, param) {
  var width = param[1];
  return Belt_Array.range(0, param[0] - 1 | 0).filter(function (y) {
                return Caml_int32.mod_(y, down) === 0;
              }).map(function (y, x) {
              return [
                      y,
                      Caml_int32.mod_(Math.imul(x, right), width)
                    ];
            });
}

function bool_array_sum(bool_array) {
  return bool_array.reduce((function (acc, v) {
                return acc + (
                        v ? 1 : 0
                      ) | 0;
              }), 0);
}

function count_tree(down, right, tree_map) {
  var route = getRoute(down, right, getSize(tree_map));
  var is_tree = function (param) {
    return Caml_array.get(Caml_array.get(tree_map, param[0]), param[1]) === "#";
  };
  return bool_array_sum(route.map(is_tree));
}

var test_input = "..##.......\n#...#...#..\n.#....#..#.\n..#.#...#.#\n.#...##..#.\n..#.##.....\n.#.#.#....#\n.#........#\n#.##...#...\n#...##....#\n.#..#...#.#";

var test_tree = input_to_tree_map(test_input);

var test_result = count_tree(1, 3, test_tree);

console.log(test_result === 7);

var test_suite = [
  [
    1,
    1
  ],
  [
    1,
    3
  ],
  [
    1,
    5
  ],
  [
    1,
    7
  ],
  [
    2,
    1
  ]
];

var v = test_suite.map(function (param) {
      return count_tree(param[0], param[1], test_tree);
    });

console.log(Caml_obj.caml_equal(v, [
          2,
          7,
          3,
          4,
          2
        ]));

var real_tree = input_to_tree_map(Fs.readFileSync("input/Day3.txt", "utf8").trim());

var result = count_tree(1, 3, real_tree);

console.log(result === 250);

var __x = test_suite.map(function (param) {
      return count_tree(param[0], param[1], real_tree);
    });

console.log(__x.reduce((function (acc, v) {
            return Math.imul(acc, v);
          }), 1));

exports.input_to_tree_map = input_to_tree_map;
exports.getSize = getSize;
exports.getRoute = getRoute;
exports.bool_array_sum = bool_array_sum;
exports.count_tree = count_tree;
exports.test_input = test_input;
exports.test_tree = test_tree;
exports.test_result = test_result;
exports.test_suite = test_suite;
exports.real_tree = real_tree;
exports.result = result;
/* test_tree Not a pure module */
