// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_SortArrayInt = require("bs-platform/lib/js/belt_SortArrayInt.js");

function parse_jolts(input) {
  var l = Belt_SortArrayInt.stableSort(Belt_Array.map(input.trim().split("\n"), (function (line) {
              return Belt_Option.getExn(Belt_Int.fromString(line));
            })));
  return [0].concat(l);
}

function find_longest_chain(l) {
  var param = l.reduce((function (param, n, index) {
          var connect = param[3];
          var third = param[2];
          var second = param[1];
          var first = param[0];
          var next = (index + 1 | 0) < l.length ? l[index + 1 | 0] : n + 3 | 0;
          var match = next - n | 0;
          switch (match) {
            case 1 :
                return [
                        first + connect | 0,
                        second,
                        third,
                        connect
                      ];
            case 2 :
                return [
                        first,
                        second + connect | 0,
                        third,
                        connect
                      ];
            case 3 :
                return [
                        first,
                        second,
                        third + connect | 0,
                        connect
                      ];
            default:
              throw {
                    RE_EXN_ID: "Failure",
                    _1: String(n) + " " + String(next),
                    Error: new Error()
                  };
          }
        }), [
        0,
        0,
        0,
        1
      ]);
  return [
          param[0],
          param[1],
          param[2]
        ];
}

function multifly_1_and_3(param) {
  return Math.imul(param[0], param[2]);
}

exports.parse_jolts = parse_jolts;
exports.find_longest_chain = find_longest_chain;
exports.multifly_1_and_3 = multifly_1_and_3;
/* No side effect */
