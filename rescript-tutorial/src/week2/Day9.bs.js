// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");

function parseNumbers(input) {
  return input.trim().split("\n").map(function (line) {
              return Belt_Option.getExn(Belt_Int.fromString(line));
            });
}

function find_invalid(preamble, numbers) {
  return Belt_Option.getExn(Caml_option.undefined_to_opt(numbers.find(function (n, i) {
                      if (i < preamble) {
                        return false;
                      } else {
                        var before_n = numbers.slice(i - preamble | 0, i);
                        return Belt_Option.isNone(Caml_option.undefined_to_opt(before_n.find(function (v) {
                                            if (before_n.includes(n - v | 0)) {
                                              return (n - v | 0) !== v;
                                            } else {
                                              return false;
                                            }
                                          })));
                      }
                    })));
}

function find_contiguous_set(numbers, target) {
  return numbers.reduce((function (result, param, i) {
                if (result.length > 0) {
                  return result;
                }
                var match = numbers.slice(i).reduce((function (param, v, j) {
                        var sum = param[0];
                        if (param[1]) {
                          return [
                                  sum,
                                  true,
                                  param[2]
                                ];
                        } else {
                          return [
                                  sum + v | 0,
                                  (sum + v | 0) === target,
                                  j
                                ];
                        }
                      }), [
                      0,
                      false,
                      0
                    ]);
                if (match[1]) {
                  return numbers.slice(i, (i + match[2] | 0) + 1 | 0);
                } else {
                  return [];
                }
              }), []);
}

function min_max_sum(l) {
  var min = Caml_splice_call.spliceApply(Math.min, [l]);
  var max = Caml_splice_call.spliceApply(Math.max, [l]);
  return min + max | 0;
}

exports.parseNumbers = parseNumbers;
exports.find_invalid = find_invalid;
exports.find_contiguous_set = find_contiguous_set;
exports.min_max_sum = min_max_sum;
/* No side effect */
