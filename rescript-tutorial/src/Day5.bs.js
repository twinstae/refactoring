// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function parse_row(raw) {
  return raw.split("").reduce((function (acc, v) {
                switch (v) {
                  case "B" :
                      return (acc << 1) + 1 | 0;
                  case "F" :
                      return (acc << 1) + 0 | 0;
                  default:
                    throw {
                          RE_EXN_ID: "Failure",
                          _1: "invalid row character",
                          Error: new Error()
                        };
                }
              }), 0);
}

function parse_column(raw) {
  return raw.split("").reduce((function (acc, v) {
                switch (v) {
                  case "L" :
                      return (acc << 1) + 0 | 0;
                  case "R" :
                      return (acc << 1) + 1 | 0;
                  default:
                    throw {
                          RE_EXN_ID: "Failure",
                          _1: "invalid row character",
                          Error: new Error()
                        };
                }
              }), 0);
}

function parse_seat(raw) {
  return {
          row: parse_row(raw.slice(0, 7)),
          col: parse_column(raw.slice(7))
        };
}

function get_seat_id(s) {
  return (s.row << 3) + s.col | 0;
}

function max(l) {
  return l.reduce((function (max, v) {
                if (v > max) {
                  return v;
                } else {
                  return max;
                }
              }), 0);
}

function min(l) {
  return l.reduce((function (min, v) {
                if (v < min) {
                  return v;
                } else {
                  return min;
                }
              }), 2048);
}

function sum_of_arithmetic_seq(l) {
  return Math.imul(min(l) + max(l) | 0, l.length) / 2 | 0;
}

function sum(l) {
  return l.reduce((function (acc, v) {
                return acc + v | 0;
              }), 0);
}

function find_my_seat(l) {
  return sum_of_arithmetic_seq(l) - sum(l) | 0;
}

exports.parse_row = parse_row;
exports.parse_column = parse_column;
exports.parse_seat = parse_seat;
exports.get_seat_id = get_seat_id;
exports.max = max;
exports.min = min;
exports.sum_of_arithmetic_seq = sum_of_arithmetic_seq;
exports.sum = sum;
exports.find_my_seat = find_my_seat;
/* No side effect */
