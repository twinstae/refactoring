// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Day7 = require("../src/Day7.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var TestUtil = require("./TestUtil.bs.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");

var test_input = "light red bags contain 1 bright white bag, 2 muted yellow bags.\ndark orange bags contain 3 bright white bags, 4 muted yellow bags.\nbright white bags contain 1 shiny gold bag.\nmuted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\nshiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\ndark olive bags contain 3 faded blue bags, 4 dotted black bags.\nvibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\nfaded blue bags contain no other bags.\ndotted black bags contain no other bags.";

var choco_rule = "mint choco bags contain 1 vanila cheese bag, 2 chocolate brown bags.";

Jest.describe("Day7 Handy Haversacks", (function (param) {
        var test_rules = Day7.parseRules(test_input);
        TestUtil.test_equal("there are 9 rules in test input", test_rules.length, 9);
        TestUtil.test_equal("parseRule with 1, 2", Day7.parseRule(choco_rule), {
              outer: "mint choco",
              inner: [
                "vanila cheese",
                "chocolate brown"
              ]
            });
        var test_rules_dict = Day7.to_dict(test_rules);
        TestUtil.test_equal("get inner 1 return expected outer", test_rules_dict["shiny gold"], [
              "bright white",
              "muted yellow"
            ]);
        TestUtil.test_equal("get inner 2 return expected outer", test_rules_dict["bright white"], [
              "light red",
              "dark orange"
            ]);
        TestUtil.test_equal("get inner 3 return expected outer", test_rules_dict["muted yellow"], [
              "light red",
              "dark orange"
            ]);
        var test_result = Day7.how_many(test_rules_dict, "shiny gold", undefined);
        TestUtil.test_equal("test result is expected 4", Belt_SetString.toArray(Belt_SetString.remove(test_result, "shiny gold")), [
              "bright white",
              "dark orange",
              "light red",
              "muted yellow"
            ]);
        return Jest.describe("context: real input", (function (param) {
                      var real_result = Day7.how_many(Day7.to_dict(Day7.parseRules(Fs.readFileSync("input/Day7.txt", "utf8").trim())), "shiny gold", undefined);
                      return TestUtil.test_equal("real result is 278", Belt_SetString.size(real_result) - 1 | 0, 278);
                    }));
      }));

exports.test_input = test_input;
exports.choco_rule = choco_rule;
/*  Not a pure module */
