// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Day7 = require("../../src/week1/Day7.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var TestUtil = require("../TestUtil.bs.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");

var test_input = "light red bags contain 1 bright white bag, 2 muted yellow bags.\ndark orange bags contain 3 bright white bags, 4 muted yellow bags.\nbright white bags contain 1 shiny gold bag.\nmuted yellow bags contain 2 shiny gold bags, 9 faded blue bags.\nshiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.\ndark olive bags contain 3 faded blue bags, 4 dotted black bags.\nvibrant plum bags contain 5 faded blue bags, 6 dotted black bags.\nfaded blue bags contain no other bags.\ndotted black bags contain no other bags.";

var test_input2 = "shiny gold bags contain 2 dark red bags.\ndark red bags contain 2 dark orange bags.\ndark orange bags contain 2 dark yellow bags.\ndark yellow bags contain 2 dark green bags.\ndark green bags contain 2 dark blue bags.\ndark blue bags contain 2 dark violet bags.\ndark violet bags contain no other bags.";

var choco_rule = "mint choco bags contain 1 vanila cheese bag, 2 chocolate brown bags.";

Jest.describe("Day7 Handy Haversacks", (function (param) {
        Jest.describe("part1", (function (param) {
                Jest.describe("context text input", (function (param) {
                        var test_rules = Day7.parseRules(test_input);
                        TestUtil.test_equal("there are 9 rules in test input", test_rules.length, 9);
                        TestUtil.test_equal("parseRule with 1, 2", Day7.parseRule(choco_rule), {
                              outer: "mint choco",
                              inner: [
                                [
                                  "vanila cheese",
                                  1
                                ],
                                [
                                  "chocolate brown",
                                  2
                                ]
                              ]
                            });
                        var test_rules_dict = Day7.to_dict(test_rules);
                        TestUtil.test_equal("get inner 1 return expected outer", test_rules_dict["shiny gold"], [
                              "bright white",
                              "muted yellow"
                            ]);
                        TestUtil.test_equal("get inner 2 return expected outer", test_rules_dict["bright white"], [
                              "light red",
                              "dark orange"
                            ]);
                        TestUtil.test_equal("get inner 3 return expected outer", test_rules_dict["muted yellow"], [
                              "light red",
                              "dark orange"
                            ]);
                        var test_result = Day7.how_many(test_rules_dict, "shiny gold", undefined);
                        return TestUtil.test_equal("4 bags can contain shing gold bag", Belt_SetString.toArray(Belt_SetString.remove(test_result, "shiny gold")), [
                                    "bright white",
                                    "dark orange",
                                    "light red",
                                    "muted yellow"
                                  ]);
                      }));
                return Jest.describe("context: real input", (function (param) {
                              var real_result = Day7.how_many(Day7.to_dict(Day7.parseRules(Fs.readFileSync("input/Day7.txt", "utf8").trim())), "shiny gold", undefined);
                              return TestUtil.test_equal("the number of bags which can contain shiny gold bag is 278", Belt_SetString.size(real_result) - 1 | 0, 278);
                            }));
              }));
        return Jest.describe("part2", (function (param) {
                      Jest.describe("context: in test input 2", (function (param) {
                              var test_reverse_dict = Day7.to_reverse_dict(Day7.parseRules(test_input2));
                              TestUtil.test_equal("reverse_dict get shiny gold return (dark red, 2)", test_reverse_dict["shiny gold"], [[
                                      "dark red",
                                      2
                                    ]]);
                              return TestUtil.test_equal("in shiny gold bag, there are 126 other bags", Day7.count_all_inner(test_reverse_dict, "shiny gold") - 1 | 0, 126);
                            }));
                      return Jest.describe("context: in real input", (function (param) {
                                    var real_result = Day7.count_all_inner(Day7.to_reverse_dict(Day7.parseRules(Fs.readFileSync("input/Day7.txt", "utf8").trim())), "shiny gold");
                                    return TestUtil.test_equal("in shiny gold bag, there are 1024 other bags", real_result - 1 | 0, 45157);
                                  }));
                    }));
      }));

exports.test_input = test_input;
exports.test_input2 = test_input2;
exports.choco_rule = choco_rule;
/*  Not a pure module */
