// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Day8 = require("../src/Day8.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var TestUtil = require("./TestUtil.bs.js");

var test_input = "nop +0\nacc +1\njmp +4\nacc +3\njmp -3\nacc -99\nacc +1\njmp -4\nacc +6";

var expected_instruction = [
  [
    "no_operation",
    0
  ],
  [
    "accumulate",
    1
  ],
  [
    "jump",
    4
  ],
  [
    "accumulate",
    3
  ],
  [
    "jump",
    -3
  ],
  [
    "accumulate",
    -99
  ],
  [
    "accumulate",
    1
  ],
  [
    "jump",
    -4
  ],
  [
    "accumulate",
    6
  ]
];

Jest.describe("Day8 Handheld Halting part1", (function (param) {
        Jest.describe("test input으로", (function (param) {
                TestUtil.test_equal("acc +1 을 parse_instruction 하면 (#accumulate, 1) 을 반환한다.", Day8.parse_instruction("acc +1"), [
                      "accumulate",
                      1
                    ]);
                var test_instructions = Day8.parse_instructions(test_input);
                TestUtil.test_equal("parse_instructions 하면, 올바른 array<instruction>을 반환한다.", test_instructions, expected_instruction);
                TestUtil.test_equal("stop_until_loop 하면, 마지막 acc 값 5를 반환한다", Day8.stop_until_loop(undefined, undefined, undefined, test_instructions), 5);
                return TestUtil.test_equal("correct_and_run 하면, 마지막 acc 값 8을 반환한다", Day8.correct_and_run(test_instructions), 8);
              }));
        return Jest.describe("real_input 으로", (function (param) {
                      var real_instructions = Day8.parse_instructions(Fs.readFileSync("input/Day8.txt", "utf8").trim());
                      TestUtil.test_equal("stop_until_loop 하면 마지막 acc 값 1675를 반환한다.", Day8.stop_until_loop(undefined, undefined, undefined, real_instructions), 1675);
                      return TestUtil.test_equal("correct_and_run 하면 마지막 acc 값 ... 을 반환한다", Day8.correct_and_run(real_instructions), 1532);
                    }));
      }));

exports.test_input = test_input;
exports.expected_instruction = expected_instruction;
/*  Not a pure module */
